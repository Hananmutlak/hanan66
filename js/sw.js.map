{"mappings":"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","sources":["src/js/sw.js"],"sourcesContent":["const CACHE_NAME = 'disease-tracker-v1';\r\nconst urlsToCache = [\r\n  '/',\r\n  '/index.html',\r\n  '/statistics.html',\r\n  '/map.html',\r\n  '/prevention.html',\r\n  '/contact.html',\r\n  '/news.html',\r\n  '/src/scss/main.scss',\r\n  '/src/scss/news.scss',\r\n  '/src/js/main.js',\r\n  '/src/js/map.js',\r\n  '/src/js/news.js',\r\n  '/src/js/charts.js',\r\n  '/src/assets/images/hero-bg.jpg',\r\n  '/src/assets/images/virus1.svg',\r\n  '/src/assets/images/virus1.png'\r\n];\r\n\r\n// تثبيت Service Worker وتخزين الملفات المطلوبة\r\nself.addEventListener('install', event => {\r\n  event.waitUntil(\r\n    caches.open(CACHE_NAME)\r\n      .then(cache => cache.addAll(urlsToCache))\r\n      .then(() => self.skipWaiting())\r\n  );\r\n});\r\n\r\n// تنشيط Service Worker وحذف التخزينات القديمة\r\nself.addEventListener('activate', event => {\r\n  const cacheWhitelist = [CACHE_NAME];\r\n  event.waitUntil(\r\n    caches.keys().then(cacheNames => {\r\n      return Promise.all(\r\n        cacheNames.map(cacheName => {\r\n          if (cacheWhitelist.indexOf(cacheName) === -1) {\r\n            return caches.delete(cacheName);\r\n          }\r\n        })\r\n      );\r\n    }).then(() => self.clients.claim())\r\n  );\r\n});\r\n\r\n// استراتيجية التخزين المؤقت: Network First للـ API وCache First للموارد الثابتة\r\nself.addEventListener('fetch', event => {\r\n  const requestUrl = new URL(event.request.url);\r\n  \r\n  // تعامل خاص مع طلبات API\r\n  if (\r\n    event.request.url.includes('newsapi.org') || \r\n    event.request.url.includes('disease.sh')\r\n  ) {\r\n    // استراتيجية Network First للـ API مع تخزين مؤقت للاستخدام في حالة عدم الاتصال\r\n    event.respondWith(\r\n      fetch(event.request)\r\n        .then(response => {\r\n          // نسخ الاستجابة لأننا سنستخدمها مرتين\r\n          const responseToCache = response.clone();\r\n          \r\n          // تخزين الاستجابة في التخزين المؤقت\r\n          caches.open(CACHE_NAME)\r\n            .then(cache => {\r\n              // تخزين الاستجابة فقط إذا كانت ناجحة\r\n              if (response.status === 200) {\r\n                // إضافة رأس لتحديد وقت التخزين\r\n                const headers = new Headers(responseToCache.headers);\r\n                headers.append('sw-fetched-on', new Date().toISOString());\r\n                \r\n                // إنشاء استجابة جديدة مع الرأس المضاف\r\n                const responseToStore = new Response(\r\n                  responseToCache.body, \r\n                  {\r\n                    status: responseToCache.status,\r\n                    statusText: responseToCache.statusText,\r\n                    headers: headers\r\n                  }\r\n                );\r\n                \r\n                // تخزين الاستجابة مع وقت انتهاء الصلاحية (30 دقيقة)\r\n                cache.put(event.request, responseToStore);\r\n              }\r\n            });\r\n          \r\n          return response;\r\n        })\r\n        .catch(() => {\r\n          // في حالة فشل الاتصال، استخدم النسخة المخزنة مؤقتًا\r\n          return caches.match(event.request)\r\n            .then(cachedResponse => {\r\n              if (cachedResponse) {\r\n                // التحقق من عمر البيانات المخزنة\r\n                const fetchedOn = new Date(cachedResponse.headers.get('sw-fetched-on'));\r\n                const ageInMinutes = (new Date() - fetchedOn) / (1000 * 60);\r\n                \r\n                // إذا كانت البيانات أقدم من ساعة، عرض إشعار للمستخدم\r\n                if (ageInMinutes > 60) {\r\n                  // يمكن إضافة رمز هنا لإظهار إشعار للمستخدم بأن البيانات قديمة\r\n                  console.warn('Using cached data that is older than 1 hour');\r\n                }\r\n                \r\n                return cachedResponse;\r\n              }\r\n              \r\n              // إذا لم تكن هناك نسخة مخزنة، عرض رسالة خطأ\r\n              return new Response(\r\n                JSON.stringify({ \r\n                  error: 'You are offline and no cached data is available' \r\n                }),\r\n                { \r\n                  status: 503,\r\n                  statusText: 'Service Unavailable',\r\n                  headers: new Headers({ 'Content-Type': 'application/json' })\r\n                }\r\n              );\r\n            });\r\n        })\r\n    );\r\n  } else {\r\n    // استراتيجية Cache First للموارد الثابتة\r\n    event.respondWith(\r\n      caches.match(event.request)\r\n        .then(response => {\r\n          // إذا وجدت في التخزين المؤقت، أعد النسخة المخزنة\r\n          if (response) {\r\n            return response;\r\n          }\r\n          \r\n          // إذا لم تكن موجودة في التخزين المؤقت، قم بجلبها من الشبكة\r\n          return fetch(event.request)\r\n            .then(networkResponse => {\r\n              // تخزين الاستجابة الجديدة في التخزين المؤقت\r\n              if (networkResponse.status === 200 && networkResponse.type === 'basic') {\r\n                const responseToCache = networkResponse.clone();\r\n                caches.open(CACHE_NAME)\r\n                  .then(cache => {\r\n                    cache.put(event.request, responseToCache);\r\n                  });\r\n              }\r\n              \r\n              return networkResponse;\r\n            });\r\n        })\r\n    );\r\n  }\r\n});\r\n\r\n// استراتيجية تحديث التخزين المؤقت في الخلفية\r\nself.addEventListener('sync', event => {\r\n  if (event.tag === 'update-cache') {\r\n    event.waitUntil(\r\n      caches.open(CACHE_NAME)\r\n        .then(cache => {\r\n          return Promise.all(\r\n            urlsToCache.map(url => {\r\n              return fetch(url)\r\n                .then(response => {\r\n                  if (response.status === 200) {\r\n                    return cache.put(url, response);\r\n                  }\r\n                })\r\n                .catch(error => console.error('Background sync failed:', error));\r\n            })\r\n          );\r\n        })\r\n    );\r\n  }\r\n});\r\n"],"names":[],"version":3,"file":"sw.js.map","sourceRoot":"/__parcel_source_root/"}