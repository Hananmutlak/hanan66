{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,C,E,C,E,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,G,C,C,E,C,O,C,C,E,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,O,C,K,E,E,S,C,K,E,E,S,C,K,E,E,C,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GC4La,EAAA,MAAA,CAAA,EAAA,aAAA,IAAA,GAtLb,IAAM,EAAgB,SAAS,cAAc,CAAC,iBAGxC,EAAe,CACnB,EACA,EACA,EACD,CAKD,SAAS,IACP,IACA,GACF,CAKA,eAAe,IACb,GAAI,CACF,IAAM,EAAW,MAAM,QAAQ,GAAG,CAAC,EAAa,GAAG,CAAC,AAAA,GAAM,MAC1D,EAAY,GACZ,aAAa,OAAO,CAAC,aAAc,KAAK,SAAS,CAAC,GACpD,CAAE,MAAO,EAAK,CACZ,EAAU,8DACV,GACF,CACF,CA0BA,eAAe,IACb,GAAI,CACF,IAAM,EAAM,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","sources":["<anon>","src/js/news.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (\n  modules,\n  entry,\n  mainEntry,\n  parcelRequireName,\n  externals,\n  distDir,\n  publicUrl,\n  devServer\n) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var importMap = previousRequire.i || {};\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        if (externals[name]) {\n          return externals[name];\n        }\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.require = nodeRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.distDir = distDir;\n  newRequire.publicUrl = publicUrl;\n  newRequire.devServer = devServer;\n  newRequire.i = importMap;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  // Only insert newRequire.load when it is actually used.\n  // The code in this file is linted against ES5, so dynamic import is not allowed.\n  // INSERT_LOAD_HERE\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n    }\n  }\n})({\"juMe2\":[function(require,module,exports,__globalThis) {\n/**\r\n * @module NewsModule\r\n * @description A module to fetch and display news from various sources.\r\n */ // The container where news will be displayed\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"NewsModule\", ()=>NewsModule);\nconst newsContainer = document.getElementById('newsContainer');\n// Available news sources\nconst NEWS_SOURCES = [\n    fetchRedditNews,\n    fetchBBCNews,\n    fetchWikipediaNews\n];\n/**\r\n * Initializes the news module by showing loading state and fetching combined news.\r\n */ function initNewsModule() {\n    showLoading();\n    fetchCombinedNews();\n}\n/**\r\n * Fetches news from all available sources and handles errors using Promise.any.\r\n */ async function fetchCombinedNews() {\n    try {\n        const articles = await Promise.any(NEWS_SOURCES.map((fn)=>fn()));\n        displayNews(articles);\n        localStorage.setItem('cachedNews', JSON.stringify(articles));\n    } catch (err) {\n        showError('Failed to connect to news sources. Displaying cached data.');\n        loadCachedNews();\n    }\n}\n/**\r\n * Fetches news filtered by a specific country name.\r\n * @param {string} country - The name of the country to filter news for.\r\n */ async function fetchNewsForCountry(country) {\n    try {\n        showLoading();\n        const articles = await Promise.any(NEWS_SOURCES.map((fn)=>fn()));\n        const filteredArticles = articles.filter((article)=>article.title.toLowerCase().includes(country.toLowerCase()) || article.description.toLowerCase().includes(country.toLowerCase()));\n        displayNews(filteredArticles.length > 0 ? filteredArticles : articles);\n    } catch (err) {\n        showError('Failed to connect to news sources. Displaying cached data.');\n        loadCachedNews();\n    }\n}\n/**\r\n * Fetches news from Reddit's health subreddit.\r\n * @returns {Promise<Object[]>} An array of news articles.\r\n * @throws Will throw an error if fetching fails.\r\n */ async function fetchRedditNews() {\n    try {\n        const res = await fetch('https://www.reddit.com/r/health/top.json?limit=10');\n        const data = await res.json();\n        return data.data.children.map((post)=>({\n                title: post.data.title,\n                description: post.data.selftext,\n                url: `https://reddit.com${post.data.permalink}`,\n                image: post.data.thumbnail || './assets/images/news-placeholder.jpg',\n                date: new Date(post.data.created_utc * 1000),\n                source: 'Reddit'\n            }));\n    } catch  {\n        throw new Error('Reddit failed');\n    }\n}\n/**\r\n * Fetches news from BBC via RSS feed.\r\n * @returns {Promise<Object[]>} An array of news articles.\r\n * @throws Will throw an error if fetching fails.\r\n */ async function fetchBBCNews() {\n    try {\n        const proxy = 'https://api.allorigins.win/raw?url=';\n        const rssUrl = 'https://feeds.bbci.co.uk/news/health/rss.xml';\n        const res = await fetch(proxy + encodeURIComponent(rssUrl));\n        const text = await res.text();\n        const parser = new DOMParser();\n        const xml = parser.parseFromString(text, \"text/xml\");\n        const items = xml.querySelectorAll('item');\n        return Array.from(items).map((item)=>({\n                title: item.querySelector('title').textContent,\n                description: item.querySelector('description').textContent,\n                url: item.querySelector('link').textContent,\n                image: item.querySelector('media\\\\:thumbnail, thumbnail')?.getAttribute('url') || './assets/images/news-placeholder.jpg',\n                date: new Date(item.querySelector('pubDate').textContent),\n                source: 'BBC News'\n            }));\n    } catch  {\n        throw new Error('BBC failed');\n    }\n}\n/**\r\n * Fetches current events from Wikipedia.\r\n * @returns {Promise<Object[]>} An array of news articles.\r\n * @throws Will throw an error if fetching fails.\r\n */ async function fetchWikipediaNews() {\n    try {\n        const res = await fetch('https://en.wikipedia.org/api/rest_v1/page/html/Portal:Current_events');\n        const html = await res.text();\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(html, 'text/html');\n        const events = doc.querySelectorAll('.vevent');\n        return Array.from(events).map((event)=>({\n                title: event.querySelector('.summary')?.textContent.trim() || \"\\u062D\\u062F\\u062B \\u062C\\u0627\\u0631\\u064A\",\n                description: event.textContent.trim(),\n                url: 'https://en.wikipedia.org/wiki/Portal:Current_events',\n                image: './assets/images/news-placeholder.jpg',\n                date: new Date(),\n                source: 'Wikipedia'\n            }));\n    } catch  {\n        throw new Error('Wikipedia failed');\n    }\n}\n/**\r\n * Displays news articles in the news container.\r\n * @param {Object[]} articles - An array of news articles to display.\r\n */ function displayNews(articles) {\n    if (!articles?.length) return showError('No news available');\n    newsContainer.innerHTML = articles.slice(0, 10).map((article)=>`\n    <article class=\"news-card\">\n      <img src=\"${article.image}\" alt=\"${article.title}\" \n           onerror=\"this.src='./assets/images/news-placeholder.jpg'\">\n      <div class=\"content\">\n        <h3><a href=\"${article.url}\" target=\"_blank\">${article.title}</a></h3>\n        <p>${article.description.substring(0, 150)}...</p>\n        <div class=\"meta\">\n          <span class=\"source\">${article.source}</span>\n          <time>${article.date.toLocaleDateString()}</time>\n        </div>\n      </div>\n    </article>\n  `).join('');\n}\n/**\r\n * Loads cached news from localStorage.\r\n */ function loadCachedNews() {\n    const cached = localStorage.getItem('cachedNews');\n    if (cached) displayNews(JSON.parse(cached));\n}\n/**\r\n * Shows a loading spinner while fetching news.\r\n */ function showLoading() {\n    newsContainer.innerHTML = `\n    <div class=\"loading\">\n      <div class=\"spinner\"></div>\n      <p>Loading news...</p>\n    </div>\n  `;\n}\n/**\r\n * Displays an error message in the news container.\r\n * @param {string} msg - The error message to display.\r\n */ function showError(msg) {\n    newsContainer.innerHTML = `\n    <div class=\"error\">\n      <i class=\"fas fa-exclamation-triangle\"></i>\n      <p>${msg}</p>\n    </div>\n  `;\n}\nconst NewsModule = {\n    init: initNewsModule,\n    fetchNewsForCountry\n};\n/**\r\n * Initializes the news module when the DOM is fully loaded.\r\n */ if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', initNewsModule);\nelse initNewsModule();\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"l5Lmv\"}],\"l5Lmv\":[function(require,module,exports,__globalThis) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, '__esModule', {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}]},[\"juMe2\"], \"juMe2\", \"parcelRequire5828\", {})\n\n//# sourceMappingURL=news.b0431678.js.map\n","/**\r\n * @module NewsModule\r\n * @description A module to fetch and display news from various sources.\r\n */\r\n\r\n// The container where news will be displayed\r\nconst newsContainer = document.getElementById('newsContainer');\r\n\r\n// Available news sources\r\nconst NEWS_SOURCES = [\r\n  fetchRedditNews,\r\n  fetchBBCNews,\r\n  fetchWikipediaNews\r\n];\r\n\r\n/**\r\n * Initializes the news module by showing loading state and fetching combined news.\r\n */\r\nfunction initNewsModule() {\r\n  showLoading();\r\n  fetchCombinedNews();\r\n}\r\n\r\n/**\r\n * Fetches news from all available sources and handles errors using Promise.any.\r\n */\r\nasync function fetchCombinedNews() {\r\n  try {\r\n    const articles = await Promise.any(NEWS_SOURCES.map(fn => fn()));\r\n    displayNews(articles);\r\n    localStorage.setItem('cachedNews', JSON.stringify(articles));\r\n  } catch (err) {\r\n    showError('Failed to connect to news sources. Displaying cached data.');\r\n    loadCachedNews();\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches news filtered by a specific country name.\r\n * @param {string} country - The name of the country to filter news for.\r\n */\r\nasync function fetchNewsForCountry(country) {\r\n  try {\r\n    showLoading();\r\n    const articles = await Promise.any(NEWS_SOURCES.map(fn => fn()));\r\n    const filteredArticles = articles.filter(article =>\r\n      article.title.toLowerCase().includes(country.toLowerCase()) ||\r\n      article.description.toLowerCase().includes(country.toLowerCase())\r\n    );\r\n    displayNews(filteredArticles.length > 0 ? filteredArticles : articles);\r\n  } catch (err) {\r\n    showError('Failed to connect to news sources. Displaying cached data.');\r\n    loadCachedNews();\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches news from Reddit's health subreddit.\r\n * @returns {Promise<Object[]>} An array of news articles.\r\n * @throws Will throw an error if fetching fails.\r\n */\r\nasync function fetchRedditNews() {\r\n  try {\r\n    const res = await fetch('https://www.reddit.com/r/health/top.json?limit=10');\r\n    const data = await res.json();\r\n    return data.data.children.map(post => ({\r\n      title: post.data.title,\r\n      description: post.data.selftext,\r\n      url: `https://reddit.com${post.data.permalink}`,\r\n      image: post.data.thumbnail || './assets/images/news-placeholder.jpg',\r\n      date: new Date(post.data.created_utc * 1000),\r\n      source: 'Reddit'\r\n    }));\r\n  } catch {\r\n    throw new Error('Reddit failed');\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches news from BBC via RSS feed.\r\n * @returns {Promise<Object[]>} An array of news articles.\r\n * @throws Will throw an error if fetching fails.\r\n */\r\nasync function fetchBBCNews() {\r\n  try {\r\n    const proxy = 'https://api.allorigins.win/raw?url=';\r\n    const rssUrl = 'https://feeds.bbci.co.uk/news/health/rss.xml';\r\n    const res = await fetch(proxy + encodeURIComponent(rssUrl));\r\n    const text = await res.text();\r\n    const parser = new DOMParser();\r\n    const xml = parser.parseFromString(text, \"text/xml\");\r\n    const items = xml.querySelectorAll('item');\r\n    return Array.from(items).map(item => ({\r\n      title: item.querySelector('title').textContent,\r\n      description: item.querySelector('description').textContent,\r\n      url: item.querySelector('link').textContent,\r\n      image: item.querySelector('media\\\\:thumbnail, thumbnail')?.getAttribute('url') || './assets/images/news-placeholder.jpg',\r\n      date: new Date(item.querySelector('pubDate').textContent),\r\n      source: 'BBC News'\r\n    }));\r\n  } catch {\r\n    throw new Error('BBC failed');\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches current events from Wikipedia.\r\n * @returns {Promise<Object[]>} An array of news articles.\r\n * @throws Will throw an error if fetching fails.\r\n */\r\nasync function fetchWikipediaNews() {\r\n  try {\r\n    const res = await fetch('https://en.wikipedia.org/api/rest_v1/page/html/Portal:Current_events');\r\n    const html = await res.text();\r\n    const parser = new DOMParser();\r\n    const doc = parser.parseFromString(html, 'text/html');\r\n    const events = doc.querySelectorAll('.vevent');\r\n    return Array.from(events).map(event => ({\r\n      title: event.querySelector('.summary')?.textContent.trim() || 'حدث جاري',\r\n      description: event.textContent.trim(),\r\n      url: 'https://en.wikipedia.org/wiki/Portal:Current_events',\r\n      image: './assets/images/news-placeholder.jpg',\r\n      date: new Date(),\r\n      source: 'Wikipedia'\r\n    }));\r\n  } catch {\r\n    throw new Error('Wikipedia failed');\r\n  }\r\n}\r\n\r\n/**\r\n * Displays news articles in the news container.\r\n * @param {Object[]} articles - An array of news articles to display.\r\n */\r\nfunction displayNews(articles) {\r\n  if (!articles?.length) return showError('No news available');\r\n  newsContainer.innerHTML = articles.slice(0, 10).map(article => `\r\n    <article class=\"news-card\">\r\n      <img src=\"${article.image}\" alt=\"${article.title}\" \r\n           onerror=\"this.src='./assets/images/news-placeholder.jpg'\">\r\n      <div class=\"content\">\r\n        <h3><a href=\"${article.url}\" target=\"_blank\">${article.title}</a></h3>\r\n        <p>${article.description.substring(0, 150)}...</p>\r\n        <div class=\"meta\">\r\n          <span class=\"source\">${article.source}</span>\r\n          <time>${article.date.toLocaleDateString()}</time>\r\n        </div>\r\n      </div>\r\n    </article>\r\n  `).join('');\r\n}\r\n\r\n/**\r\n * Loads cached news from localStorage.\r\n */\r\nfunction loadCachedNews() {\r\n  const cached = localStorage.getItem('cachedNews');\r\n  if (cached) displayNews(JSON.parse(cached));\r\n}\r\n\r\n/**\r\n * Shows a loading spinner while fetching news.\r\n */\r\nfunction showLoading() {\r\n  newsContainer.innerHTML = `\r\n    <div class=\"loading\">\r\n      <div class=\"spinner\"></div>\r\n      <p>Loading news...</p>\r\n    </div>\r\n  `;\r\n}\r\n\r\n/**\r\n * Displays an error message in the news container.\r\n * @param {string} msg - The error message to display.\r\n */\r\nfunction showError(msg) {\r\n  newsContainer.innerHTML = `\r\n    <div class=\"error\">\r\n      <i class=\"fas fa-exclamation-triangle\"></i>\r\n      <p>${msg}</p>\r\n    </div>\r\n  `;\r\n}\r\n\r\n/**\r\n * Exports the NewsModule with initialization and country-specific news fetching functions.\r\n */\r\nexport const NewsModule = {\r\n  init: initNewsModule,\r\n  fetchNewsForCountry\r\n};\r\n\r\n/**\r\n * Initializes the news module when the DOM is fully loaded.\r\n */\r\nif (document.readyState === 'loading') {\r\n  document.addEventListener('DOMContentLoaded', initNewsModule);\r\n} else {\r\n  initNewsModule();\r\n}","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","externals","distDir","publicUrl","devServer","globalObject","globalThis","self","window","global","previousRequire","importMap","i","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","length","mainExports","define","amd","__globalThis","parcelHelpers","defineInteropFlag","export","NewsModule","newsContainer","document","getElementById","NEWS_SOURCES","fetchRedditNews","fetchBBCNews","fetchWikipediaNews","initNewsModule","showLoading","fetchCombinedNews","articles","Promise","any","map","fn","displayNews","localStorage","setItem","JSON","stringify","showError","loadCachedNews","fetch","data","json","children","post","title","description","selftext","url","permalink","image","thumbnail","date","Date","created_utc","source","proxy","encodeURIComponent","text","items","xml","parser","DOMParser","parseFromString","querySelectorAll","Array","from","item","querySelector","textContent","getAttribute","html","events","doc","event","trim","innerHTML","slice","article","substring","toLocaleDateString","join","cached","getItem","parse","msg","init","fetchNewsForCountry","country","filteredArticles","filter","toLowerCase","includes","readyState","addEventListener","interopDefault","a","__esModule","default","value","exportAll","dest","keys","forEach","key","prototype","hasOwnProperty","enumerable","destName"],"version":3,"file":"news.b0431678.js.map"}