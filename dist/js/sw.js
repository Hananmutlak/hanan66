let CACHE_NAME="disease-tracker-v1",urlsToCache=["/","/index.html","/statistics.html","/map.html","/prevention.html","/contact.html","/news.html","/src/scss/main.scss","/src/scss/news.scss","/src/js/main.js","/src/js/map.js","/src/js/news.js","/src/js/charts.js","/src/assets/images/hero-bg.jpg","/src/assets/images/virus1.svg","/src/assets/images/virus1.png"];self.addEventListener("install",e=>{e.waitUntil(caches.open(CACHE_NAME).then(e=>e.addAll(urlsToCache)).then(()=>self.skipWaiting()))}),self.addEventListener("activate",e=>{let s=[CACHE_NAME];e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(-1===s.indexOf(e))return caches.delete(e)}))).then(()=>self.clients.claim()))}),self.addEventListener("fetch",e=>{new URL(e.request.url),e.request.url.includes("newsapi.org")||e.request.url.includes("disease.sh")?e.respondWith(fetch(e.request).then(s=>{let t=s.clone();return caches.open(CACHE_NAME).then(a=>{if(200===s.status){let s=new Headers(t.headers);s.append("sw-fetched-on",new Date().toISOString());let n=new Response(t.body,{status:t.status,statusText:t.statusText,headers:s});a.put(e.request,n)}}),s}).catch(()=>caches.match(e.request).then(e=>{if(e){let s=new Date(e.headers.get("sw-fetched-on"));return(new Date-s)/6e4>60&&console.warn("Using cached data that is older than 1 hour"),e}return new Response(JSON.stringify({error:"You are offline and no cached data is available"}),{status:503,statusText:"Service Unavailable",headers:new Headers({"Content-Type":"application/json"})})}))):e.respondWith(caches.match(e.request).then(s=>s||fetch(e.request).then(s=>{if(200===s.status&&"basic"===s.type){let t=s.clone();caches.open(CACHE_NAME).then(s=>{s.put(e.request,t)})}return s})))}),self.addEventListener("sync",e=>{"update-cache"===e.tag&&e.waitUntil(caches.open(CACHE_NAME).then(e=>Promise.all(urlsToCache.map(s=>fetch(s).then(t=>{if(200===t.status)return e.put(s,t)}).catch(e=>console.error("Background sync failed:",e))))))});